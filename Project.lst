Microsoft (R) Macro Assembler Version 14.40.33813.0	    08/11/24 02:55:03
1Add and Subtract, Version 2         (AddSub2.asm	     Page 1 - 1


				TITLE Add and Subtract, Version 2         (AddSub2.asm)

				; This program adds and subtracts 32-bit integers
				; and stores the sum in a variable.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 0D 0A 00		NewLine DB 13, 10, 0
				; Prompts
 00000003 50 6C 65 61 73	PromptOperation DB 'Please select which operation to compute: + - * / ^', 13, 10, 0
	   65 20 73 65 6C
	   65 63 74 20 77
	   68 69 63 68 20
	   6F 70 65 72 61
	   74 69 6F 6E 20
	   74 6F 20 63 6F
	   6D 70 75 74 65
	   3A 20 2B 20 2D
	   20 2A 20 2F 20
	   5E 0D 0A 00
 00000039 45 6E 74 65 72	PromptNumOne DB 'Enter first number: ', 0
	   20 66 69 72 73
	   74 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000004E 45 6E 74 65 72	PromptNumTwo DB 'Enter second number: ', 0
	   20 73 65 63 6F
	   6E 64 20 6E 75
	   6D 62 65 72 3A
	   20 00

 00000064 53 65 6C 65 63	OperationInvalidError DB 'Selected operation is invalid: ', 0
	   74 65 64 20 6F
	   70 65 72 61 74
	   69 6F 6E 20 69
	   73 20 69 6E 76
	   61 6C 69 64 3A
	   20 00
 00000084 43 61 6E 6E 6F	DivideZeroError DB 'Cannot divide by zero.', 13, 10, 13, 10, 0
	   74 20 64 69 76
	   69 64 65 20 62
	   79 20 7A 65 72
	   6F 2E 0D 0A 0D
	   0A 00
 0000009F 49 6E 74 65 67	OverflowError DB 'Integer overflow.', 13, 10, 13, 10, 0
	   65 72 20 6F 76
	   65 72 66 6C 6F
	   77 2E 0D 0A 0D
	   0A 00

 = 00000078			MEMORY_LENGTH EQU 4 * 30
 000000B5  00000078 [		CalcMemory DWORD MEMORY_LENGTH DUP(0)
	    00000000
	   ]
 00000295 00000000		MemIndex DWORD 0

				; Operations
 00000299 2B			OpAddition DB '+'
 0000029A 2D			OpSubtraction DB '-'
 0000029B 2A			OpMultiplication DB '*'
 0000029C 2F			OpDivision DB '/'
 0000029D 5E			OpExponent DB '^'
 0000029E 20			CharSpace BYTE ' '
 0000029F 3D			CharEqual BYTE '='

 000002A0 00			Operation BYTE 0
 000002A1 00000000		NumOne DWORD 0
 000002A5 00000000		NUMTwo DWORD 0
 000002A9 00000000		Result DWORD 0

 00000000			.code
				; Only prints sign if negative
 00000000			PrintInt PROC USES EAX,
					X:DWORD

 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  50		   *	    push   eax
 00000004  8B 45 08			MOV EAX, X

 00000007  83 7D 08 00			CMP X, 0
 0000000B  7C 07			JL PrintSigned

 0000000D			PrintUnsigned:
 0000000D  E8 00000000 E		CALL WriteDec
 00000012  EB 05			JMP EndPrint
 00000014			PrintSigned:
 00000014  E8 00000000 E		CALL WriteInt
 00000019			EndPrint:

					RET
 00000019  58		   *	    pop    eax
 0000001A  C9		   *	    leave  
 0000001B  C2 0004	   *	    ret    00004h
 0000001E			PrintInt ENDP


 0000001E			PrintChar PROC,
					X:BYTE

 0000001E  55		   *	    push   ebp
 0000001F  8B EC	   *	    mov    ebp, esp
 00000021  60				PUSHAD
 00000022  8A 45 08			MOV AL, X
 00000025  E8 00000000 E		CALL WriteChar
 0000002A  61				POPAD

					RET
 0000002B  C9		   *	    leave  
 0000002C  C2 0004	   *	    ret    00004h
 0000002F			PrintChar ENDP


				; Add numbers, store in EAX
 0000002F			AddNum PROC
 0000002F  55				PUSH EBP
 00000030  8B EC			MOV EBP, ESP

 00000032  8B 5D 0C			MOV EBX, [EBP + 12]
 00000035  03 5D 08			ADD EBX, [EBP + 8]

 00000038  70 02			JO AdditionOverflow
 0000003A  EB 0A			JMP ReturnAddition

 0000003C			AdditionOverflow:
 0000003C  BA 0000009F R		MOV EDX, OFFSET OverflowError
 00000041  E8 00000000 E		CALL WriteString

 00000046			ReturnAddition:
 00000046  5D				POP EBP
 00000047  8B C3			MOV EAX, EBX
 00000049  C3				RET
 0000004A			AddNum ENDP


				; Subtract numbers, store in EAX
 0000004A			SubtractNum PROC,
					X:DWORD, Y:DWORD

 0000004A  55		   *	    push   ebp
 0000004B  8B EC	   *	    mov    ebp, esp
 0000004D  8B 5D 08			MOV EBX, X
 00000050  2B 5D 0C			SUB EBX, Y

 00000053  70 02			JO SubtractionOverflow
 00000055  EB 0A			JMP ReturnSubtraction

 00000057			SubtractionOverflow:
 00000057  BA 0000009F R		MOV EDX, OFFSET OverflowError
 0000005C  E8 00000000 E		CALL WriteString
 00000061			ReturnSubtraction:

 00000061  8B C3			MOV EAX, EBX
					RET
 00000063  C9		   *	    leave  
 00000064  C2 0008	   *	    ret    00008h
 00000067			SubtractNum ENDP


				; Multiply numbers, store in EAX
 00000067			MultiplyNum PROC,
					X:DWORD, Y:DWORD

 00000067  55		   *	    push   ebp
 00000068  8B EC	   *	    mov    ebp, esp
 0000006A  8B 45 08			MOV EAX, X
 0000006D  99				CDQ
 0000006E  0F AF 45 0C			IMUL EAX, Y

 00000072  70 02			JO MultiplicationOverflow
 00000074  EB 0E			JMP ReturnMultiplication

 00000076			MultiplicationOverflow:
 00000076  8B C8			MOV ECX, EAX
 00000078  BA 0000009F R		MOV EDX, OFFSET OverflowError
 0000007D  E8 00000000 E		CALL WriteString
 00000082  8B C1			MOV EAX, ECX
					
 00000084			ReturnMultiplication:
					RET
 00000084  C9		   *	    leave  
 00000085  C2 0008	   *	    ret    00008h

 00000088			MultiplyNum ENDP


				; Divide numbers, store in EAX
 00000088			DivideNum PROC,
					X:DWORD, Y:DWORD
					
 00000088  55		   *	    push   ebp
 00000089  8B EC	   *	    mov    ebp, esp
 0000008B  8B 45 08			MOV EAX, X

 0000008E  99				CDQ	; reduce probablity of overflow
 0000008F  83 7D 0C 00			CMP Y, 0; Checks for Zero
 00000093  74 05			JE ZeroDivision

 00000095  F7 7D 0C			IDIV Y

 00000098  EB 0E			JMP ReturnSubtraction ; No Zero

					;If the User divides by 0
 0000009A			ZeroDivision:
 0000009A  8B C8			MOV ECX, EAX
 0000009C  BA 00000084 R		MOV EDX, OFFSET DivideZeroError
 000000A1  E8 00000000 E		CALL WriteString
 000000A6  8B C1			MOV EAX, ECX

 000000A8			ReturnSubtraction:
					RET
 000000A8  C9		   *	    leave  
 000000A9  C2 0008	   *	    ret    00008h
 000000AC			DivideNum ENDP


				; Multiply numbers, store in EAX
 000000AC			ExponentNum PROC,
					X:DWORD, Y:DWORD

 000000AC  55		   *	    push   ebp
 000000AD  8B EC	   *	    mov    ebp, esp
 000000AF  B8 00000001			MOV EAX, 1
 000000B4  8B 4D 0C			MOV ECX, Y

 000000B7			LoopExp:
 000000B7  0F AF 45 08			IMUL EAX, X
 000000BB  70 04			JO ExponentOverflow	
					;CALL DumpRegs
 000000BD  E2 F8			LOOP LoopExp

 000000BF  EB 0E			JMP ReturnExponent

 000000C1			ExponentOverflow:
 000000C1  8B D8			MOV EBX, EAX
 000000C3  BA 0000009F R		MOV EDX, OFFSET OverflowError
 000000C8  E8 00000000 E		CALL WriteInt
 000000CD  8B C3			MOV EAX, EBX

 000000CF			ReturnExponent:
					RET
 000000CF  C9		   *	    leave  
 000000D0  C2 0008	   *	    ret    00008h
 000000D3			ExponentNum ENDP


 000000D3			main PROC
					; Ask for desired operation
 000000D3			ProgramStart:
 000000D3  BA 00000003 R		MOV EDX, OFFSET PromptOperation
 000000D8  E8 00000000 E		CALL WriteString

					; Read operation character from user
 000000DD  E8 00000000 E		CALL ReadChar
 000000E2  A2 000002A0 R		MOV Operation, AL

					; (Debug) Print out selected operation number
					;MOVZX EAX, Operation
					;CALL WriteInt
					;MOV EDX, OFFSET NewLine
					;CALL WriteString

					; Ask for desired first number
 000000E7  BA 00000039 R		MOV EDX, OFFSET PromptNumOne
 000000EC  E8 00000000 E		CALL WriteString
					
					; Read first number from user
 000000F1  E8 00000000 E		CALL ReadInt
 000000F6  A3 000002A1 R		MOV NumOne, EAX
					
					; (Debug) Print NumOne
					; CALL WriteInt
					
					; Ask for desired second number
 000000FB  BA 0000004E R		MOV EDX, OFFSET PromptNumTwo
 00000100  E8 00000000 E		CALL WriteString
					
					; Read second number from user
 00000105  E8 00000000 E		CALL ReadInt
 0000010A  A3 000002A5 R		MOV NumTwo, EAX

					; (Debug) Print NumTwo
					;CALL WriteInt

					; Comparison for operation jump
					
 0000010F  A0 000002A0 R		MOV AL, Operation

					; Determine which operation was selected and jump to the correct label
 00000114  3A 05 00000299 R		CMP AL, OpAddition
 0000011A  74 43			JE SelectedAddition

 0000011C  3A 05 0000029A R		CMP AL, OpSubtraction
 00000122  74 4E			JE SelectedSubtraction

 00000124  3A 05 0000029B R		CMP AL, OpMultiplication
 0000012A  74 59			JE SelectedMultiplication

 0000012C  3A 05 0000029C R		CMP AL, OpDivision
 00000132  74 64			JE SelectedDivision

 00000134  3A 05 0000029D R		CMP AL, OpExponent
 0000013A  74 6F			JE SelectedExponent

 0000013C  BA 00000064 R		MOV EDX, OFFSET OperationInvalidError
 00000141  E8 00000000 E		CALL WriteString
 00000146  A0 000002A0 R		MOV AL, Operation
 0000014B  E8 00000000 E		CALL WriteChar
 00000150  E8 00000000 E		CALL Crlf
 00000155  E8 00000000 E		CALL Crlf
 0000015A  E9 FFFFFF74			JMP ProgramStart ; HANDLE USER ERROR: Operation invalid

 0000015F			SelectedAddition:
 0000015F  FF 35 000002A1 R		PUSH NumOne
 00000165  FF 35 000002A5 R		PUSH NumTwo

 0000016B  E8 FFFFFEBF			CALL AddNum

 00000170  EB 4A			JMP EndSelected
 00000172			SelectedSubtraction:
					INVOKE SubtractNum, NumOne, NumTwo
 00000172  FF 35 000002A5 R *	    push   NUMTwo
 00000178  FF 35 000002A1 R *	    push   NumOne
 0000017E  E8 FFFFFEC7	   *	    call   SubtractNum
 00000183  EB 37			JMP EndSelected
 00000185			SelectedMultiplication:
					INVOKE MultiplyNum, NumOne, NumTwo
 00000185  FF 35 000002A5 R *	    push   NUMTwo
 0000018B  FF 35 000002A1 R *	    push   NumOne
 00000191  E8 FFFFFED1	   *	    call   MultiplyNum
 00000196  EB 24			JMP EndSelected
 00000198			SelectedDivision:
					INVOKE DivideNum, NumOne, NumTwo
 00000198  FF 35 000002A5 R *	    push   NUMTwo
 0000019E  FF 35 000002A1 R *	    push   NumOne
 000001A4  E8 FFFFFEDF	   *	    call   DivideNum
 000001A9  EB 11			JMP EndSelected
 000001AB			SelectedExponent:
					INVOKE ExponentNum, NumOne, NumTwo
 000001AB  FF 35 000002A5 R *	    push   NUMTwo
 000001B1  FF 35 000002A1 R *	    push   NumOne
 000001B7  E8 FFFFFEF0	   *	    call   ExponentNum
					
 000001BC			EndSelected:
					; Store result in Result
 000001BC  A3 000002A9 R		MOV Result, EAX

					; Store calculation memory
 000001C1  8B 1D 00000295 R		MOV EBX, MemIndex

 000001C7  89 04 9D			MOV [CalcMemory + EBX * DWORD], EAX
	   000000B5 R

 000001CE  43				INC EBX
 000001CF  89 1D 00000295 R		MOV MemIndex, EBX

					; Print calculation
					INVOKE PrintInt, NumOne
 000001D5  FF 35 000002A1 R *	    push   NumOne
 000001DB  E8 FFFFFE20	   *	    call   PrintInt
					INVOKE PrintChar, CharSpace
 000001E0  A0 0000029E R   *	    mov    al, CharSpace
 000001E5  50		   *	    push   eax
 000001E6  E8 FFFFFE33	   *	    call   PrintChar
					INVOKE PrintChar, Operation
 000001EB  A0 000002A0 R   *	    mov    al, Operation
 000001F0  50		   *	    push   eax
 000001F1  E8 FFFFFE28	   *	    call   PrintChar
					INVOKE PrintChar, CharSpace
 000001F6  A0 0000029E R   *	    mov    al, CharSpace
 000001FB  50		   *	    push   eax
 000001FC  E8 FFFFFE1D	   *	    call   PrintChar
					INVOKE PrintInt, NumTwo
 00000201  FF 35 000002A5 R *	    push   NUMTwo
 00000207  E8 FFFFFDF4	   *	    call   PrintInt
					INVOKE PrintChar, CharSpace
 0000020C  A0 0000029E R   *	    mov    al, CharSpace
 00000211  50		   *	    push   eax
 00000212  E8 FFFFFE07	   *	    call   PrintChar
					INVOKE PrintChar, CharEqual
 00000217  A0 0000029F R   *	    mov    al, CharEqual
 0000021C  50		   *	    push   eax
 0000021D  E8 FFFFFDFC	   *	    call   PrintChar
					INVOKE PrintChar, CharSpace
 00000222  A0 0000029E R   *	    mov    al, CharSpace
 00000227  50		   *	    push   eax
 00000228  E8 FFFFFDF1	   *	    call   PrintChar
					INVOKE PrintInt, Result
 0000022D  FF 35 000002A9 R *	    push   Result
 00000233  E8 FFFFFDC8	   *	    call   PrintInt
 00000238  E8 00000000 E		CALL Crlf
 0000023D  E8 00000000 E		CALL Crlf

 00000242  BB 00000000			MOV EBX, 0
 00000247  8B 0D 00000295 R		MOV ECX, MemIndex
 0000024D			DisplayMemory:
 0000024D  8B 34 9D			MOV ESI, [CalcMemory + EBX * DWORD]
	   000000B5 R
					INVOKE PrintInt, ESI
 00000254  56		   *	    push   esi
 00000255  E8 FFFFFDA6	   *	    call   PrintInt
					INVOKE PrintChar, CharSpace
 0000025A  A0 0000029E R   *	    mov    al, CharSpace
 0000025F  50		   *	    push   eax
 00000260  E8 FFFFFDB9	   *	    call   PrintChar

 00000265  43				INC EBX
 00000266  E2 E5			LOOP DisplayMemory

 00000268  E8 00000000 E		CALL Crlf

					; Begin another calculation
 0000026D  E9 FFFFFE61			JMP ProgramStart

					exit
 00000272  6A 00	   *	    push   +000000000h
 00000274  E8 00000000 E   *	    call   ExitProcess
 00000279			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.40.33813.0	    08/11/24 02:55:03
1Add and Subtract, Version 2         (AddSub2.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002AD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000279 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AddNum . . . . . . . . . . . . .	P Near	 0000002F _TEXT	Length= 0000001B Public STDCALL
  AdditionOverflow . . . . . . .	L Near	 0000003C _TEXT	
  ReturnAddition . . . . . . . .	L Near	 00000046 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DivideNum  . . . . . . . . . . .	P Near	 00000088 _TEXT	Length= 00000024 Public STDCALL
  X  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  Y  . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  ZeroDivision . . . . . . . . .	L Near	 0000009A _TEXT	
  ReturnSubtraction  . . . . . .	L Near	 000000A8 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExponentNum  . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000027 Public STDCALL
  X  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  Y  . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  LoopExp  . . . . . . . . . . .	L Near	 000000B7 _TEXT	
  ExponentOverflow . . . . . . .	L Near	 000000C1 _TEXT	
  ReturnExponent . . . . . . . .	L Near	 000000CF _TEXT	
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MultiplyNum  . . . . . . . . . .	P Near	 00000067 _TEXT	Length= 00000021 Public STDCALL
  X  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  Y  . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  MultiplicationOverflow . . . .	L Near	 00000076 _TEXT	
  ReturnMultiplication . . . . .	L Near	 00000084 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintChar  . . . . . . . . . . .	P Near	 0000001E _TEXT	Length= 00000011 Public STDCALL
  X  . . . . . . . . . . . . . .	Byte	 bp + 00000008
PrintInt . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001E Public STDCALL
  X  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  PrintUnsigned  . . . . . . . .	L Near	 0000000D _TEXT	
  PrintSigned  . . . . . . . . .	L Near	 00000014 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 00000019 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SubtractNum  . . . . . . . . . .	P Near	 0000004A _TEXT	Length= 0000001D Public STDCALL
  X  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  Y  . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  SubtractionOverflow  . . . . .	L Near	 00000057 _TEXT	
  ReturnSubtraction  . . . . . .	L Near	 00000061 _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 000000D3 _TEXT	Length= 000001A6 Public STDCALL
  ProgramStart . . . . . . . . .	L Near	 000000D3 _TEXT	
  SelectedAddition . . . . . . .	L Near	 0000015F _TEXT	
  SelectedSubtraction  . . . . .	L Near	 00000172 _TEXT	
  SelectedMultiplication . . . .	L Near	 00000185 _TEXT	
  SelectedDivision . . . . . . .	L Near	 00000198 _TEXT	
  SelectedExponent . . . . . . .	L Near	 000001AB _TEXT	
  EndSelected  . . . . . . . . .	L Near	 000001BC _TEXT	
  DisplayMemory  . . . . . . . .	L Near	 0000024D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CalcMemory . . . . . . . . . . .	DWord	 000000B5 _DATA	
CharEqual  . . . . . . . . . . .	Byte	 0000029F _DATA	
CharSpace  . . . . . . . . . . .	Byte	 0000029E _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DivideZeroError  . . . . . . . .	Byte	 00000084 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MEMORY_LENGTH  . . . . . . . . .	Number	 00000078h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MemIndex . . . . . . . . . . . .	DWord	 00000295 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMTwo . . . . . . . . . . . . .	DWord	 000002A5 _DATA	
NewLine  . . . . . . . . . . . .	Byte	 00000000 _DATA	
NumOne . . . . . . . . . . . . .	DWord	 000002A1 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OpAddition . . . . . . . . . . .	Byte	 00000299 _DATA	
OpDivision . . . . . . . . . . .	Byte	 0000029C _DATA	
OpExponent . . . . . . . . . . .	Byte	 0000029D _DATA	
OpMultiplication . . . . . . . .	Byte	 0000029B _DATA	
OpSubtraction  . . . . . . . . .	Byte	 0000029A _DATA	
OperationInvalidError  . . . . .	Byte	 00000064 _DATA	
Operation  . . . . . . . . . . .	Byte	 000002A0 _DATA	
OverflowError  . . . . . . . . .	Byte	 0000009F _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PromptNumOne . . . . . . . . . .	Byte	 00000039 _DATA	
PromptNumTwo . . . . . . . . . .	Byte	 0000004E _DATA	
PromptOperation  . . . . . . . .	Byte	 00000003 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Result . . . . . . . . . . . . .	DWord	 000002A9 _DATA	
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
